function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.screen_pred = render.predicate({"screen"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.view = vmath.matrix4()
	self.projection = vmath.matrix4()
end

function update(self)
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	if window_width == 0 or window_height == 0 then
		return
	end

	-- clear screen buffers
	--
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	render.set_viewport(0, 0, window_width, window_height)

	-- render world (sprites, tilemaps, particles etc)
	--
	local view_world = self.view
	local proj_world = self.projection
	local frustum_world = proj_world * view_world

	render.set_view(view_world)
	render.set_projection(proj_world)
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.draw(self.tile_pred, {frustum = frustum_world})
	render.draw_debug3d()

	-- render screen space
	--
	local view_screen = vmath.matrix4()
	local proj_screen = vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1, 1)
	local frustum_screen = proj_screen * view_screen

	render.set_view(view_screen)
	render.set_projection(proj_screen)
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)
	render.draw(self.screen_pred, {frustum = frustum_screen})
end

function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
		self.projection = message.projection
	end
end
